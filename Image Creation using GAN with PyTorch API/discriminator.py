import torch.nn as nn

class D(nn.Module):
    def __init__(self): # init function to define the architecture of the discriminator
        super(D, self).__init__() # Inheriting from the nn.Module tools
        self.main = nn.Sequential( 
            '''
            This is a meta module of a neural network that will contain a sequence of modules (convolutions, full connections, 
            etc.). This is just an opposite of the 'Generator' block which is obvious because we feed the output of the
            'Generator' to the 'Discriminator'
            
            '''
            
            # 1st convolutional layer
            nn.Conv2d(3, # in_channels = defines 3 color channel each for RGB(output of the generator)
                      64, # feature dimension of the image created by this convolutional layer
                      4, # kernel size
                      2, # stride of 2
                      1, # 1-padding
                      bias = False), 
            # LeakyReLU activation to break the linearity
            nn.LeakyReLU(0.2, # alpha = leakage parameter of the l-Relu
                         inplace = True), 
            
            # 2nd convolutional layer
            nn.Conv2d(64, # input for this conv layer = output of the previous layer
                      128, 4, 2, 1, bias = False),
            nn.BatchNorm2d(128),# normalizing all the features along the dimension of the batch
            nn.LeakyReLU(0.2, inplace = True),
            
            # 3rd convolutional layer
            nn.Conv2d(128, 256, 4, 2, 1, bias = False),
            nn.BatchNorm2d(256), 
            nn.LeakyReLU(0.2, inplace = True), 
            
            # 4th convolutional layer
            nn.Conv2d(256, 512, 4, 2, 1, bias = False), 
            nn.BatchNorm2d(512), 
            nn.LeakyReLU(0.2, inplace = True), 
            
            # Final convolutional layer
            nn.Conv2d(512, 
                      1, # output(discriminator returning a number between 0 and 1)
                      4, 
                      1, # stride of 1
                      0, # padding of 0
                      bias = False), 
            nn.Sigmoid() 
            '''
            We expect the output of the discriminator to be between 0 and 1(0 means the generated image is not close
            to real image and 1 means the generated image is indistinguishable from the real image). Hence the sigmoid 
            activation function is chosen for that purpose as its output always lies between 0 and 1
            
            ''' 
        )

    def forward(self, input): 
        '''
        This will propagate the input signal thru layers of neural network  of the discriminator. 
        The input is the image created by the generator.
        The function returns the output which will be a value between 0 and 1.
        
        The discrimantor decised whether the image generated by the Generator is acceptable or not.
        The name 'Discriminator' comes as it is discriminating the creation of the generator.
        
        '''        
        output = self.main(input) 
        return output.view(-1) # flattening the output
        # the output of the convolution needs to be flattened to convert 2-D output to a vector